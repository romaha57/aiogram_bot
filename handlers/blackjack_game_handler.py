from aiogram import types

from API.card_game_21 import get_first_card, get_more_one_card
from keyboards.card_game_button import create_game_button
from utils.bkackjack_game_params import check_win_or_lose, add_card_in_hands


async def press_start_or_again_card_game(callback: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–∞—Ä—Ç—ã –∏–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–∑–∞–Ω–æ–≤–æ' """

    first_card = get_first_card()
    my_hand = add_card_in_hands(first_card)

    await callback.answer()
    await callback.message.answer(f'üîÖ –ö–∞—Ä—Ç–∞: {first_card}\n'
                                  f'–í—Å–µ–≥–æ –æ—á–∫–æ–≤: <b>{my_hand}</b>',
                                  reply_markup=create_game_button())


async def press_one_more_card(callback: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–µ—â–µ –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞' """

    new_card = get_more_one_card()
    my_hand = add_card_in_hands(new_card)

    if new_card is False:
        await callback.message.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
    else:
        await callback.answer()
        await callback.message.answer(f'üîÖ –ö–∞—Ä—Ç–∞: {new_card}\n'
                                      f'–í—Å–µ–≥–æ –æ—á–∫–æ–≤: <b>{my_hand}</b>',
                                      reply_markup=create_game_button())


async def press_open_hand_card_game(callback: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–≤—Å–∫—Ä—ã–≤–∞–µ–º—Å—è' """

    result, score = check_win_or_lose()
    if result == 'lose':
        await callback.message.answer('üî¥ <b>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏</b>')
    elif result == 'draw':
        await callback.message.answer('üî≤ <b>–ù–∏—á—å—è</b>')
    else:
        await callback.message.answer(f'üü¢ <b>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏</b>')